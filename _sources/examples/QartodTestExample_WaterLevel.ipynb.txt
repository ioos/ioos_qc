{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bokeh.plotting import output_notebook\n",
    "\n",
    "output_notebook()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from bokeh.layouts import gridplot\n",
    "from bokeh.plotting import figure, show\n",
    "\n",
    "\n",
    "def plot_results(data, var_name, results, title, test_name):\n",
    "    time = data[\"time\"]\n",
    "    obs = data[var_name]\n",
    "    qc_test = results[\"qartod\"][test_name]\n",
    "\n",
    "    qc_pass = np.ma.masked_where(qc_test != 1, obs)\n",
    "    qc_suspect = np.ma.masked_where(qc_test != 3, obs)\n",
    "    qc_fail = np.ma.masked_where(qc_test != 4, obs)\n",
    "    qc_notrun = np.ma.masked_where(qc_test != 2, obs)\n",
    "\n",
    "    p1 = figure(x_axis_type=\"datetime\", title=test_name + \" : \" + title)\n",
    "    p1.grid.grid_line_alpha = 0.3\n",
    "    p1.xaxis.axis_label = \"Time\"\n",
    "    p1.yaxis.axis_label = \"Observation Value\"\n",
    "\n",
    "    p1.line(time, obs, legend_label=\"obs\", color=\"#A6CEE3\")\n",
    "    p1.circle(\n",
    "        time,\n",
    "        qc_notrun,\n",
    "        size=2,\n",
    "        legend_label=\"qc not run\",\n",
    "        color=\"gray\",\n",
    "        alpha=0.2,\n",
    "    )\n",
    "    p1.circle(time, qc_pass, size=4, legend_label=\"qc pass\", color=\"green\", alpha=0.5)\n",
    "    p1.circle(\n",
    "        time,\n",
    "        qc_suspect,\n",
    "        size=4,\n",
    "        legend_label=\"qc suspect\",\n",
    "        color=\"orange\",\n",
    "        alpha=0.7,\n",
    "    )\n",
    "    p1.circle(time, qc_fail, size=6, legend_label=\"qc fail\", color=\"red\", alpha=1.0)\n",
    "\n",
    "    show(gridplot([[p1]], width=800, height=400))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Specify data and QC configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# QC configuration\n",
    "# For sea water temperature in degrees C\n",
    "# This configuration is used to call the corresponding method in the ioos_qc library\n",
    "# See documentation for description of each test and its inputs:\n",
    "#   https://ioos.github.io/ioos_qc/api/ioos_qc.html#module-ioos_qc.qartod\n",
    "qc_config = {\n",
    "    \"qartod\": {\n",
    "        \"gross_range_test\": {\"fail_span\": [-10, 10], \"suspect_span\": [-2, 3]},\n",
    "        \"flat_line_test\": {\n",
    "            \"tolerance\": 0.001,\n",
    "            \"suspect_threshold\": 10800,\n",
    "            \"fail_threshold\": 21600,\n",
    "        },\n",
    "        \"rate_of_change_test\": {\"threshold\": 0.001},\n",
    "        \"spike_test\": {\"suspect_threshold\": 0.8, \"fail_threshold\": 3},\n",
    "    },\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load data, run tests and plot results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "url = \"https://github.com/ioos/ioos_qc/raw/master/docs/source/examples\"\n",
    "fname = f\"{url}/water_level_example.csv\"\n",
    "variable_name = \"sea_surface_height_above_sea_level\"\n",
    "\n",
    "data = pd.read_csv(fname, parse_dates=[\"time\"])\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ioos_qc.config import QcConfig\n",
    "\n",
    "qc = QcConfig(qc_config)\n",
    "qc_results = qc.run(inp=data[variable_name], tinp=data[\"timestamp\"], zinp=data[\"z\"])\n",
    "qc_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "title = \"Water Level [MHHW] [m] : Kotzebue, AK\"\n",
    "\n",
    "plot_results(data, variable_name, qc_results, title, \"gross_range_test\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_results(data, variable_name, qc_results, title, \"flat_line_test\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_results(data, variable_name, qc_results, title, \"rate_of_change_test\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "plot_results(data, variable_name, qc_results, title, \"spike_test\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
