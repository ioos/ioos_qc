{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# QARTOD - Single Test\n",
    "\n",
    "This notebook shows the simplest use case for the IOOS QARTOD package - a single test performed on a timeseries loaded into a Pandas DataFrame. It shows how to define the test configuration and how the output is structured. At the end, there is an example of how to use the flags in data visualization. \n",
    "\n",
    "# Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bokeh.plotting import output_notebook\n",
    "\n",
    "output_notebook()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load data\n",
    "\n",
    "Loads data from a local .csv file and put it into a Pandas DataFrame.\n",
    "\n",
    "The data are some Water level from a fixed [station in Kotzebue, AK](https://www.google.com/maps?q=66.895035,-162.566752)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "url = \"https://github.com/ioos/ioos_qc/raw/master/docs/source/examples\"\n",
    "fname = f\"{url}/water_level_example.csv\"\n",
    "\n",
    "variable_name = \"sea_surface_height_above_sea_level\"\n",
    "\n",
    "data = pd.read_csv(fname, parse_dates=[\"time\"])\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Call test method directly\n",
    "\n",
    "You can all individual QARTOD tests directly, manually passing in data and parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ioos_qc import qartod\n",
    "\n",
    "qc_results = qartod.spike_test(\n",
    "    inp=data[variable_name],\n",
    "    suspect_threshold=0.8,\n",
    "    fail_threshold=3,\n",
    ")\n",
    "\n",
    "print(qc_results)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# QC configuration and Running\n",
    "\n",
    "While you can call qartod methods directly, we recommend using a `QcConfig` object instead. This object encapsulates the test method and parameters into a single dict or JSON object. This makes your configuration more understandable and portable.\n",
    "\n",
    "The `QcConfig` object is a special configuration object that determines which tests are run and defines the configuration for each test. The object's `run()` function runs the appropriate tests and returns a resulting dictionary of flag values.\n",
    "\n",
    "Descriptions of each test and its inputs can be found in the [ioos_qc.qartod module documentation](https://ioos.github.io/ioos_qc/api/ioos_qc.html#module-ioos_qc.qartod)\n",
    "\n",
    "[QartodFlags](https://ioos.github.io/ioos_qc/api/ioos_qc.html#ioos_qc.qartod.QartodFlags) defines the flag meanings.\n",
    "\n",
    "\n",
    "The configuration object can be initialized using a dictionary or a YAML file. Here is one example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ioos_qc.config import QcConfig\n",
    "\n",
    "qc_config = {\n",
    "    \"qartod\": {\n",
    "        \"spike_test\": {\n",
    "            \"suspect_threshold\": 0.8,\n",
    "            \"fail_threshold\": 3,\n",
    "        },\n",
    "    },\n",
    "}\n",
    "qc = QcConfig(qc_config)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and now we can run the test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "qc_results = qc.run(\n",
    "    inp=data[variable_name],\n",
    "    tinp=data[\"time\"],\n",
    ")\n",
    "\n",
    "qc_results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These results can be visualized using Bokeh."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bokeh.layouts import gridplot\n",
    "from bokeh.plotting import figure, show\n",
    "\n",
    "title = \"Water Level [MHHW] [m] : Kotzebue, AK\"\n",
    "time = data[\"time\"]\n",
    "qc_test = qc_results[\"qartod\"][\"spike_test\"]\n",
    "\n",
    "p1 = figure(x_axis_type=\"datetime\", title=f\"Spike Test : {title}\")\n",
    "p1.grid.grid_line_alpha = 0.3\n",
    "p1.xaxis.axis_label = \"Time\"\n",
    "p1.yaxis.axis_label = \"Spike Test Result\"\n",
    "p1.line(time, qc_test, color=\"blue\")\n",
    "\n",
    "show(gridplot([[p1]], width=800, height=400))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Alternative Configuration Method\n",
    "\n",
    "\n",
    "Here is the same example but using the YAML file instead."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "qc = QcConfig(\"./spike_test.yaml\")\n",
    "\n",
    "qc_results = qc.run(\n",
    "    inp=data[variable_name],\n",
    "    tinp=data[\"timestamp\"],\n",
    ")\n",
    "\n",
    "qc_results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using the Flags\n",
    "\n",
    "The array of flags can then be used to filter data or color plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "def plot_results(data, var_name, results, title, test_name):\n",
    "    \"\"\"Plot timeseries of original data colored by quality flag\n",
    "\n",
    "    Args:\n",
    "    ----\n",
    "        data: pd.DataFrame of original data including a time variable\n",
    "        var_name: string name of the variable to plot\n",
    "        results: Ordered Dictionary of qartod test results\n",
    "        title: string to add to plot title\n",
    "        test_name: name of the test to determine which flags to use\n",
    "\n",
    "    \"\"\"\n",
    "    # Set-up\n",
    "    time = data[\"time\"]\n",
    "    obs = data[var_name]\n",
    "    qc_test = results[\"qartod\"][test_name]\n",
    "\n",
    "    # Create a separate timeseries of each flag value\n",
    "    qc_pass = np.ma.masked_where(qc_test != 1, obs)\n",
    "    qc_suspect = np.ma.masked_where(qc_test != 3, obs)\n",
    "    qc_fail = np.ma.masked_where(qc_test != 4, obs)\n",
    "    qc_notrun = np.ma.masked_where(qc_test != 2, obs)\n",
    "\n",
    "    # start the figure\n",
    "    p1 = figure(x_axis_type=\"datetime\", title=test_name + \" : \" + title)\n",
    "    p1.grid.grid_line_alpha = 0.3\n",
    "    p1.xaxis.axis_label = \"Time\"\n",
    "    p1.yaxis.axis_label = \"Observation Value\"\n",
    "\n",
    "    # plot the data, and the data colored by flag\n",
    "    p1.line(time, obs, legend_label=\"obs\", color=\"#A6CEE3\")\n",
    "    p1.circle(\n",
    "        time,\n",
    "        qc_notrun,\n",
    "        size=2,\n",
    "        legend_label=\"qc not run\",\n",
    "        color=\"gray\",\n",
    "        alpha=0.2,\n",
    "    )\n",
    "    p1.circle(time, qc_pass, size=4, legend_label=\"qc pass\", color=\"green\", alpha=0.5)\n",
    "    p1.circle(\n",
    "        time,\n",
    "        qc_suspect,\n",
    "        size=4,\n",
    "        legend_label=\"qc suspect\",\n",
    "        color=\"orange\",\n",
    "        alpha=0.7,\n",
    "    )\n",
    "    p1.circle(time, qc_fail, size=6, legend_label=\"qc fail\", color=\"red\", alpha=1.0)\n",
    "\n",
    "    # show the plot\n",
    "    show(gridplot([[p1]], width=800, height=400))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_results(data, variable_name, qc_results, title, \"spike_test\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot flag values again for comparison."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "show(gridplot([[p1]], width=800, height=400))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
